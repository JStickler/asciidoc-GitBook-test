<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<?asciidoc-toc maxdepth="4"?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
<info>
<title>Installing Red Hat Middleware Management with CloudForms</title>
<date>2016-11-17</date>
<title>Red Hat Middleware Management Server Release Notes</title>
<productname>Red Hat Middleware Management</productname>
<productnumber>1.0</productnumber>
<subtitle>For Use with Red Hat Middleware Management 1</subtitle>
<abstract>
    <para>This documentation contains the {ShortProductName} server Release Notes for Red Hat Middleware Management 1.</para>
</abstract>
<authorgroup>
    <orgname>Red Hat Customer Content Services </orgname>
</authorgroup>
<xi:include href="Common_Content/Legal_Notice.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
</info>
<chapter xml:id="install_chapter_1">
<title>Prerequisites</title>
<note>
<simpara>This release of Red Hat Middleware Management is a technical preview. Technology Previews provide early access to upcoming product innovations, letting you to test new features and provide feedback during the development process. Technology Preview releases are <emphasis>not</emphasis> intended for production use.
 For more information see <link xlink:href="https://access.redhat.com/support/offerings/production/scope_moredetail">the Red Hat customer portal.</link></simpara>
</note>
<simpara>This document provides instructions for installing Red Hat Middleware Management.  The installation media is two container files available from brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888.</simpara>
<section xml:id="architecture_overview">
<title>Architecture Overview</title>
<simpara>Within the Red Hat Middleware Management solution, there are several distinct components:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Middleware management server</emphasis>: A JBoss Enterprise Application Platform (EAP) 7
based application that collects metrics and events from middleware servers and
sends that data to the CloudForms console.
The middleware management server also executes operations on middleware servers.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Cassandra datastore</emphasis>: Storage for metrics data based on the Apache Cassandra
database management system.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Middleware management Ruby Gem</emphasis>: Ruby client to middleware management server.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Middleware management provider</emphasis>: The Ruby on Rails component shipped in CloudForms that
communicates with the middleware management server through the middleware management
 Ruby Gem and provides a user interface for the middleware capabilities.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Middleware management agent</emphasis>: Agents that reside on the host where the JBoss middleware is running and push data to the middleware management server.</simpara>
<itemizedlist>
<listitem>
<simpara>Android</simpara>
</listitem>
<listitem>
<simpara>Go</simpara>
</listitem>
<listitem>
<simpara>Java</simpara>
</listitem>
<listitem>
<simpara>Python</simpara>
</listitem>
<listitem>
<simpara>Ruby</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
<section xml:id="installation_checklist">
<title>Installation Overview</title>
<section xml:id="_installation_steps">
<title>Installation Steps</title>
<simpara>Before you begin install installing Red Hat Middleware Management, you should have the following information:</simpara>
<itemizedlist>
<listitem>
<simpara>A non-root user to perform the middleware management server installation</simpara>
</listitem>
<listitem>
<simpara>The IP/Hostname and port of the Cassandra server</simpara>
</listitem>
<listitem>
<simpara>A user with permission to write to the Cassandra data store
(used for ongoing operations)</simpara>
</listitem>
</itemizedlist>
<simpara>The installation workflow is as follows:</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10063; Install and configure Docker</simpara>
<itemizedlist>
<listitem>
<simpara>Register your machine, add the Red Hat repositories</simpara>
</listitem>
<listitem>
<simpara>Install Docker</simpara>
</listitem>
<listitem>
<simpara>Start Docker service</simpara>
</listitem>
<listitem>
<simpara>Enable Docker service</simpara>
</listitem>
<listitem>
<simpara>Edit Docker configuration</simpara>
</listitem>
<listitem>
<simpara>Restart Docker</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>&#10063; Install and configure PostgreSQL</simpara>
<itemizedlist>
<listitem>
<simpara>Enable the repository</simpara>
</listitem>
<listitem>
<simpara>Install the PostgreSQL server</simpara>
</listitem>
<listitem>
<simpara>Open the firewall for remote connections</simpara>
</listitem>
<listitem>
<simpara>Edit the configuration files</simpara>
</listitem>
<listitem>
<simpara>Restart PostgreSQL</simpara>
</listitem>
<listitem>
<simpara>Create the database</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>&#10063; Installing Red Hat Middleware Management server</simpara>
<itemizedlist>
<listitem>
<simpara>Downloading the Docker Containers</simpara>
</listitem>
<listitem>
<simpara>Start Cassandra</simpara>
</listitem>
<listitem>
<simpara>Configure Cassandra</simpara>
</listitem>
<listitem>
<simpara>Start the services</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>&#10063; Installing Red Hat Middleware Management agent</simpara>
<itemizedlist>
<listitem>
<simpara>Download the agent</simpara>
</listitem>
<listitem>
<simpara>Install the agent on the EAP server</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>&#10063; Adding a middleware provider to CloudForms</simpara>
</listitem>
<listitem>
<simpara>&#10063; Adding nodes to Cassandra</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="installation_prerequisites">
<title>Installation Prerequisites</title>
<simpara>The installation instructions for the Red Hat Middleware Management server assume that you already have the following in place:</simpara>
<itemizedlist>
<listitem>
<simpara>Red Hat Enterprise Linux 7.2 or higher or Red Hat Enterprise Atomic Host 7.2 or higher. For installation instructions, refer to the
<link xlink:href="https://access.redhat.com/documentation/en/red-hat-enterprise-linux/">Red Hat Enterprise Linux installation guide.</link></simpara>
</listitem>
<listitem>
<simpara>Red Hat CloudForms 4.2 installed.  For installation instructions,  refer to the
<link xlink:href="https://access.redhat.com/documentation/en/red-hat-cloudforms/">Red Hat CloudForms installation guide</link></simpara>
</listitem>
<listitem>
<simpara>Docker version 1.8 or higher.</simpara>
</listitem>
<listitem>
<simpara>PostgreSQL 9.4 or higher.</simpara>
</listitem>
</itemizedlist>
<section xml:id="docker_configuration">
<title>Installing and Configuring Docker</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Register your Linux machine and add extra repositories for Docker support:</simpara>
<programlisting language="bash" linenumbering="unnumbered">subscription-manager register --username=&lt;rhnuser&gt; --password=&lt;pwd&gt;
subscription-manager list --available
subscription-manager attach --pool=&lt;pool_id&gt;
subscription-manager repos --enable=rhel-7-server-extras-rpms</programlisting>
</listitem>
<listitem>
<simpara>Install Docker and and the required dependencies:</simpara>
<programlisting language="bash" linenumbering="unnumbered">yum install docker</programlisting>
</listitem>
<listitem>
<simpara>Start the docker service:</simpara>
<programlisting language="bash" linenumbering="unnumbered">systemctl start docker.service</programlisting>
</listitem>
<listitem>
<simpara>Enable the Docker service:</simpara>
<programlisting language="bash" linenumbering="unnumbered">systemctl enable docker.service</programlisting>
</listitem>
<listitem>
<simpara>Edit your Docker configuration:</simpara>
<simpara>Red Hat product docker images are available via the Brew Pulp docker registry (brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888).  The SSL certificate for the Brew Pulp registry needs to be marked as insecure.</simpara>
<simpara>Edit <literal>/etc/sysconfig/docker</literal> on your system (RHEL or Fedora) and make sure to add the correct registry name, including the port number (8888), as an insecure registry:</simpara>
<formalpara>
<title>Edit /etc/sysconfig/docker</title>
<para>
<screen>INSECURE_REGISTRY='--insecure-registry brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888'</screen>
</para>
</formalpara>
</listitem>
<listitem>
<simpara>Restart the Docker daemon.</simpara>
<screen>sudo systemctl restart docker</screen>
</listitem>
</orderedlist>
</section>
<section xml:id="_installing_and_configuring_postgresql_server_9_5">
<title>Installing and Configuring PostgreSQL Server 9.5</title>
<simpara>Unless you already have a PostgreSQL 9.5 Server installed, you will need to install it.</simpara>
<simpara>To install PostgreSQL on a RHEL machine:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Enable the software collection 2.2 repository to get the required version of PostgreSQL.</simpara>
<programlisting language="bash" linenumbering="unnumbered">subscription-manager repos --enable rhel-server-rhscl-7-rpms</programlisting>
</listitem>
<listitem>
<simpara>Install the server with:</simpara>
<programlisting language="bash" linenumbering="unnumbered">yum install rh-postgresql95
scl enable rh-postgresql95 bash
postgresql-setup --initdb
service rh-postgresql95-postgresql start
systemctl enable rh-postgresql95-postgresql.service</programlisting>
</listitem>
<listitem>
<simpara>Open the firewall for PostgreSQL remote connections:</simpara>
<screen>sudo firewall-cmd --permanent --add-port=5432/tcp
sudo firewall-cmd --add-port=5432/tcp</screen>
</listitem>
<listitem>
<simpara>Edit <literal>/var/opt/rh/rh-postgresql95/lib/pgsql/data/postgresql.conf</literal> to allow remote connections.  Add the following line:</simpara>
<formalpara>
<title>postgresql.conf</title>
<para>
<screen>listen_addresses = '*'</screen>
</para>
</formalpara>
</listitem>
<listitem>
<simpara>Edit <literal>/var/lib/pgsql/data/pg_hba.conf</literal> to allow a user to connect to the <literal>mwmanager</literal> database.  Add the following line (Replace <literal>my_db_username</literal> with the value of your choice):</simpara>
<formalpara>
<title>pg_hba.conf</title>
<para>
<screen>host   mwmanager   my_db_username   0.0.0.0/0   md5</screen>
</para>
</formalpara>
</listitem>
<listitem>
<simpara>Restart PostgreSQL</simpara>
<programlisting language="bash" linenumbering="unnumbered">systemctl restart rh-postgresql95-postgresql.service</programlisting>
</listitem>
<listitem>
<simpara>Create the <literal>mwmanager</literal> database:</simpara>
<screen>su postgres
systemctl enable rh-postgresql95-postgresql.service
psql</screen>
<simpara>Replace <literal>my_db_username</literal> with the value chosen in <literal>pg_hba.conf</literal> and <literal>my_db_password</literal> with the value of your choice:</simpara>
<screen>postgres=# CREATE USER my_db_username WITH PASSWORD 'my_db_password';
postgres=# CREATE DATABASE mwmanager OWNER my_db_username;</screen>
</listitem>
<listitem>
<simpara>To verify, connect to the PostgreSQL server remotely with:</simpara>
<screen>psql -h my_db_host -U my_db_username -W -d mwmanager</screen>
</listitem>
</orderedlist>
</section>
</section>
</chapter>
<chapter xml:id="install_chapter_2">
<title>Installation</title>
<section xml:id="downloading_server_software">
<title>Downloading the Middleware Management Software</title>
<section xml:id="downloading_the_files">
<title>Downloading the Docker Containers</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Pull the Docker container image from the registry, for example:</simpara>
<screen>docker pull brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888/jboss-eap-7-tech-preview/eap70</screen>
</listitem>
<listitem>
<simpara>Pull the Cassandra container image from the registry, for example:</simpara>
<screen>docker pull brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888/jboss/cassandra:latest</screen>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="installing_the_middleware_management_server">
<title>Installing the Middleware Management Server</title>
<important>
<simpara>Do not perform the installation as the ROOT user; create a non-root user.</simpara>
</important>
<section xml:id="starting_cassandra">
<title>Install and Configure Cassandra</title>
<simpara>The middleware management services require a running Cassandra instance.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Start the Cassandra container.</simpara>
<screen>docker run --name hawkular-cassandra -d -e CASSANDRA_START_RPC=true brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888/jboss/cassandra:latest</screen>
</listitem>
<listitem>
<simpara>Configure the Cassandra Data Location.
 By default the Cassandra container will create a volume under <literal>/opt/apache-cassandra/data</literal>.  This container directory will automatically be mapped to a unique local directory which you can view using <literal>docker inspect &lt;container-id&gt;</literal>.
You can use the <literal>-v</literal> option to map the Cassandra data volume to a specific host directory.</simpara>
<screen>docker run --name hawkular-cassandra -d -e CASSANDRA_START_RPC=true -v /tmp/mydatadir:/opt/apache-cassandra/data:Z
brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888/jboss/cassandra:latest</screen>
<note>
<simpara>The <literal>Z</literal> option is necessary on RHEL/Fedora based systems to correctly set the SElinux permissions.</simpara>
</note>
</listitem>
<listitem>
<simpara>Verify that the server is running, with the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">docker ps</programlisting>
</listitem>
<listitem>
<simpara>You can view the node information with this command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">docker exec -it &lt;container_id&gt; /opt/apache-cassandra/bin/nodetool info</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="cassandar_non-default_user">
<title>Running Cassandra with a Non-default User</title>
<simpara>You can run the Cassandra container with an arbitrary user ID, however, that user must have permissions to write to the Cassandra data volume.</simpara>
<screen>chown myuser:myuser /tmp/mydatadir
docker run --name hawkular-cassandra -d -e CASSANDRA_START_RPC=true --user $(id -u myuser) -v /tmp/mydatadir:/opt/apache-cassandra/data:Z
brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888/jboss/cassandra:latest</screen>
</section>
<section xml:id="_starting_the_hawkular_services">
<title>Starting the Hawkular Services</title>
<simpara>Start the hawkular-services and link it to the running Cassandra instance.  For more information about the services options, see <xref linkend="Hawkular_Services_Options.adoc"/>.</simpara>
<screen>docker run -d --link=hawkular-cassandra
-e CASSANDRA_NODES=hawkular-cassandra
-e HAWKULAR_BACKEND=remote
-p 8080:8080 -p 8443:8443 -p 9990:9990 brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888/hawkular/hawkular-services:latest</screen>
<simpara>Now we can launch our Middleware Manager container and tell it to connect to Cassandra (change my_db_username, my_db_password and my_db_host to the values
used when you configure PostgreSQL, and set a new combination of username/password for HAWKULAR_USERNAME and HAWKULAR_PASSWORD)</simpara>
<programlisting language="bash" linenumbering="unnumbered">docker run --name mwmanager  -d \
          -e HAWKULAR_BACKEND=remote   \
          -e CASSANDRA_NODES=mwmanager-cassandra \
          -e HAWKULAR_INVENTORY_JDBC_URL=jdbc:postgresql://my_db_host:5432/mwmanager
          -e HAWKULAR_INVENTORY_JDBC_USERNAME=my_db_username \
          -e HAWKULAR_INVENTORY_JDBC_PASSWORD=my_db_password \
          -e HAWKULAR_USERNAME=my_mwmanager_user \
          -e HAWKULAR_PASSWORD=my_mwmanager_password \
          -p 8080:8080 -p 8443:8443 -p 9990:9990 \
          --link=mwmanager-cassandra
          brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888/hawkular/hawkular-services:latest</programlisting>
<orderedlist numeration="arabic">
<listitem>
<simpara>Verify the middleware management installation by launching a brower and navigating to <link xlink:href="http://my_mwmanager_host:8080/">http://my_mwmanager_host:8080/</link>. After a minute or two, you should see the the middleware manager console.</simpara>
</listitem>
</orderedlist>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="topics/images/images/MiddlewareManagerForCloudForms.png"/>
</imageobject>
<textobject><phrase>Middleware Manager Console</phrase></textobject>
</inlinemediaobject></simpara>
</section>
<section xml:id="hawkular_services_options">
<title>Middleware Management Service Options</title>
<table frame="all" rowsep="1" colsep="1">
<title>Service Options</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Name</simpara></entry>
<entry align="left" valign="top"><simpara>Default</simpara></entry>
<entry align="left" valign="top"><simpara>Description</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>ADD_HAWKULAR_USER</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to add a user to middleware management before the server starts</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>HAWKULAR_USERNAME</simpara></entry>
<entry align="left" valign="top"><simpara>jdoe</simpara></entry>
<entry align="left" valign="top"><simpara>Username for the new user</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>HAWKULAR_PASSWORD</simpara></entry>
<entry align="left" valign="top"><simpara>password</simpara></entry>
<entry align="left" valign="top"><simpara>Password for the new user</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>CASSANDRA_NODES</simpara></entry>
<entry align="left" valign="top"><simpara>myCassandra</simpara></entry>
<entry align="left" valign="top"><simpara>The hostname or IP of Cassandra</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>HAWKULAR_METRICS_TTL</simpara></entry>
<entry align="left" valign="top"><simpara>14</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>DB_TIMEOUT</simpara></entry>
<entry align="left" valign="top"><simpara>-</simpara></entry>
<entry align="left" valign="top"><simpara>If set, will wait for specified number of seconds for Cassandra to start before starting middleware management.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>HAWKULAR_INVENTORY_JDBC_URL</simpara></entry>
<entry align="left" valign="top"><simpara>-</simpara></entry>
<entry align="left" valign="top"><simpara>For example, <literal>jdbc:postgresql://my_db_host:5432/mwprovider</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>HAWKULAR_INVENTORY_JDBC_USERNAME</simpara></entry>
<entry align="left" valign="top"><simpara>-</simpara></entry>
<entry align="left" valign="top"><simpara>PostgreSQL username</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>HAWKULAR_INVENTORY_JDBC_PASSWORD</simpara></entry>
<entry align="left" valign="top"><simpara>-</simpara></entry>
<entry align="left" valign="top"><simpara>PostgreSQL password</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
</section>
<section xml:id="installing_the_middleware_management_agent">
<title>Installing the Middleware Management Agent</title>
<simpara>To instrument an Enterprise Application Platform (EAP) server so that you can can monitor and manage it from CloudForms, you must install a middleware management agent on the server.</simpara>
<section xml:id="_download_the_agent_installer">
<title>Download the Agent Installer</title>
<simpara>The EAP agent installer is available from the middleware manager console.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>In a browser, go to <link xlink:href="http://my_mwmanager_host:8080/">http://my_mwmanager_host:8080/</link>.</simpara>
</listitem>
<listitem>
<simpara>Click the "EAP Agent Installer" link.</simpara>
</listitem>
<listitem>
<simpara>In the Authentication Required pop-up, enter the credentials for the middleware manager uesr.</simpara>
<simpara>The middleware management server downloads a file named  <literal>hawkular-wildfly-agent-installer.jar</literal> to your local machine.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="_install_the_agent_in_enterprise_application_platform">
<title>Install the agent in Enterprise Application Platform</title>
<simpara>After you have downloaded the <literal>.jar</literal> file, use one of the following commands to copy the file to the EAP server and install the agent.  Select the command that matches the mode of your EAP server.</simpara>
<formalpara>
<title>Standalone mode</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">java -jar ~Downloads/hawkular-wildfly-agent-installer.jar
   --target-location=/opt/jboss-eap-7.0/
   --server-url=http://192.168.1.123:8080
   --username=my_mwmanager_username
   --password=my_mwmanager_password</programlisting>
</para>
</formalpara>
<formalpara>
<title>Domain mode</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">java -jar ~Downloads/hawkular-wildfly-agent-installer.jar
   --target-location=/opt/jboss-eap-7.0/
   --target-config=/opt/jboss-eap-7.0/domain/configuration/host.xml
   --server-url=http://192.168.1.123:8080
   --username=my_mwmanager_username
   --password=my_mwmanager_password</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_verify_the_agent_installation_in_cloudforms">
<title>Verify the Agent Installation in CloudForms</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Start or restart the newly instrumented EAP server.</simpara>
</listitem>
<listitem>
<simpara>In CloudForms, go to [Middleware &gt; Providers]
and select the middleware management provider that you previously configured.</simpara>
</listitem>
<listitem>
<simpara>On the Summary screen, in the <emphasis role="strong">Relationships</emphasis> table, click the Middleware Servers icon to view the instrumented servers.</simpara>
</listitem>
</orderedlist>
<note>
<simpara>The new server may take a few moments to appear.</simpara>
</note>
</section>
</section>
</chapter>
<chapter xml:id="install_chapter_3">
<title>Chapter 3 - Initial Configuration</title>
<section xml:id="adding_a_middleware_provider">
<title>Adding a Middleware Provider to CloudForms</title>
<simpara>Adding a New Middleware Provider</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Log in to the CloudForms Management Engine as a user who has permissions to add providers. The default user is <literal>admin</literal>, password <literal>smartvm</literal>.</simpara>
</listitem>
<listitem>
<simpara>Select menu:[Middleware Providers].</simpara>
</listitem>
<listitem>
<simpara>Click the <emphasis role="strong">Configuration</emphasis> button and select <emphasis role="strong">Add a New Middleware Provider</emphasis> from the menu.</simpara>
</listitem>
<listitem>
<simpara>In the Add a New Middleware Provider screen, enter the following:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Name</emphasis> - Enter a user friendly name for the provider.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Type</emphasis> = Hawkular</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Zone</emphasis></simpara>
<simpara>Endpoints</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Hostname (or IPv4 or IPv6 address)</emphasis> Hostname of the machine where you installed the middleware manager.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">API Port</emphasis> = Port of the middleware manager. The default is 8080.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">User Name</emphasis> - The user name used to start the middleware manager.  This user must have privileged access, for example <literal>root</literal> or <literal>administrator</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Password</emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Confirm Password</emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Before you add the provider, click the <emphasis role="strong">Validate</emphasis> button to confirm that the user has the proper credentials.</simpara>
<informalexample>
<important>
<simpara>Click the Validate button.</simpara>
</important>
<simpara>There is an internal flag that indicates if the provider is validated or not. If the provider is not validated, the Middleware Provider does not start all of the worker threads. Then, if the provider goes down, the Middleware Provider may flag it as disabled in the database and you will be unable to restart it.</simpara>
</informalexample>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Add</emphasis>.</simpara>
</listitem>
</orderedlist>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="/images/MW_Provider_Summary.png"/>
</imageobject>
<textobject><phrase>MW Provider Summary</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="cassandra_clusters">
<title>Cassandra Cluster Setup</title>
<section xml:id="_adding_nodes">
<title>Adding Nodes</title>
<simpara>If you need to expand the Cassandra cluster on the same machine, you can launch a new Cassandra container and configure it to point to the seed container.</simpara>
<note>
<simpara>Make sure that you provide a valid seed container so the new node can bootstrap properly.</simpara>
</note>
<orderedlist numeration="arabic">
<listitem>
<simpara>Launch the new Cassandra container.</simpara>
<programlisting language="bash" linenumbering="unnumbered">docker run -d -e CASSANDRA_SEEDS=mwmanager-cassandra -d \
              --link mwmanager-cassandra  \
              brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888/jboss/cassandra:latest</programlisting>
</listitem>
<listitem>
<simpara>Verify the container has launched using the <literal>docker ps</literal> command.</simpara>
</listitem>
<listitem>
<simpara>Verify the status of the node by running the <literal>nodetool</literal> command inside the container.</simpara>
<screen>docker exec -it mwmanager-cassandra /opt/apache-cassandra/bin/nodetool status

Datacenter: datacenter1
=======================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address     Load       Tokens       Owns (effective)  Host ID                               Rack
UN  172.17.0.2  490.35 KB  256          50.2%             ead3a0ee-b040-4873-8b62-aa700d02b0c1  rack1
UN  172.17.0.4  312.28 KB  256          49.8%             8e4a73eb-5545-48e1-9464-ef2728f8852e  rack1</screen>
</listitem>
<listitem>
<simpara>After all nodes appear UP you should run the cleanup process in each of the other nodes of the cluster. This operation removes all unnecessary keys that don&#8217;t belong to the node itself. You can perform this operation using <literal>nodetool cleanup</literal> inside each container.</simpara>
<note>
<simpara>The cleanup process needs temporary disk space (proportional to the amount of data stored)
and is an I/O intensive operation, so it should be postponed to lower usage hours.</simpara>
</note>
<programlisting language="bash" linenumbering="unnumbered">docker exec -it &lt;container_id&gt; /opt/apache-cassandra/bin/nodetool cleanup</programlisting>
<simpara>Each time you want to add a new node to the cluster, you should repeat this entire process.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="_removing_a_node">
<title>Removing a Node.</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Select the node to be removed from the cluster. You can obtain a list of nodes by running <literal>docker ps</literal>.</simpara>
</listitem>
<listitem>
<simpara>After you have selected the node, whether the node is up or down using <literal>nodetool status</literal>.</simpara>
</listitem>
<listitem>
<simpara>Run the decommission process inside the container. This process will move data to the other nodes, and replicate the appropriate data.</simpara>
<programlisting language="bash" linenumbering="unnumbered">  docker exec -it my_container_id /usr/bin/nodetool decommission</programlisting>
</listitem>
<listitem>
<simpara>You can monitor the progress of the process using <literal>nodetool netstats</literal>.</simpara>
<programlisting language="bash" linenumbering="unnumbered">docker exec -it &lt;container_id&gt; /opt/apache-cassandra/bin/nodetool netstats</programlisting>
<screen>Mode: DECOMMISSIONED
Not sending any streams.
Read Repair Statistics:</screen>
</listitem>
<listitem>
<simpara>Once the process finishes, you can delete the container.</simpara>
<programlisting language="bash" linenumbering="unnumbered">docker stop my_container_id
docker rm my_container_id</programlisting>
<simpara>or</simpara>
<screen>docker rm --force my_container_id</screen>
</listitem>
</orderedlist>
</section>
<section xml:id="_replacing_a_node">
<title>Replacing a node</title>
<simpara>If something goes wrong with one node, you can replace it with a new one.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Get the status of the cluster using <literal>nodetool status</literal>.</simpara>
<screen>docker exec -it mwmanager-cassandra /opt/apache-cassandra/bin/nodetool status

=======================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address     Load       Tokens       Owns (effective)  Host ID                               Rack
UN  172.17.0.3  179.25 KiB  256          67.6%             3dc29aa0-5cb7-4352-a45d-72600f87ee48  rack1
DN  172.17.0.2  166.47 KiB  256          63.4%             b73c89e5-e2e1-470e-874b-f926b7243b49  rack1
UN  172.17.0.4  83.71 KiB  256          69.0%             fe1e6949-1fc7-496a-a572-a3416b47d16f  rack1</screen>
</listitem>
<listitem>
<simpara>If there is a dead node,get the IP address of that node.</simpara>
</listitem>
<listitem>
<simpara>Start a new node container using the following command, where <literal>node_replaced_ip</literal> is the IP of the node we want to replace.</simpara>
<programlisting language="bash" linenumbering="unnumbered">docker run -d -e JVM_OPTS="-Dcassandra.replace_address=&lt;node_replaced_ip&gt;" \
           -e CASSANDRA_SEEDS=mwmanager-cassandra\
           -e CASSANDRA_START_RPC=true \
           --link mwmanager-cassandra \
           brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888/jboss/cassandra:latest</programlisting>
</listitem>
<listitem>
<simpara>Run <literal>nodetool status</literal> again to see if the node was replaced.</simpara>
</listitem>
<listitem>
<simpara>After the new node finishes the bootstrap process, wait 72 hours for remove the old node.</simpara>
</listitem>
</orderedlist>
<simpara><emphasis>Revised on 2016-11-17 16:03:32 EST</emphasis></simpara>
</section>
</section>
</chapter>
</book>
